{-# LANGUAGE ScopedTypeVariables #-}

--{-# LANGUAGE TypeFamilies #-}

module Main where
import Control.Comonad
import Control.Concurrent
import System.Console.ANSI
import Text.Printf
--import Debug.Trace
--import Control.Comonad.Env
import Data.List
import Data.Maybe
import System.IO

import Class
import InfPlane
import Torus
import Klein
import BoardCreation

--Projective Plane
data PlaneZipProj a = PlaneZipProj (ZpMobius (ZpMobius a))
instance Functor PlaneZipProj where
  fmap f (PlaneZipProj zs) = PlaneZipProj $ fmap (fmap f) zs

everyNth :: Int -> [a] -> [a] --get every nth elment, starting from n. I.e. to get evens, (everyNth 2 [a,b,c,d,e]) gets [b,d]. 
everyNth n xs = case drop (n-1) xs of
                  (y:ys) -> y : everyNth n ys
                  [] -> []

--io stuff
gameOfLifeRule :: (PlaneZip p z1 z2) => p z1 z2 Bool -> Bool
gameOfLifeRule p =
  let numNeighbors = sum $ (map fromEnum) $ concat $ getTrueSquare p
    in if (extract p) then numNeighbors==3 || numNeighbors==4 --one more than standard, since it counts the live cell itself
       else numNeighbors==3

makeAnyLifeRule :: (PlaneZip p z1 z2) => [Int] -> [Int] -> p z1 z2 Bool -> Bool
makeAnyLifeRule birth survival p =
  let numNeighbors = sum $ (map fromEnum) $ concat $ getTrueSquare p
  in if extract p then
       (numNeighbors-1) `elem` survival
     else
       numNeighbors `elem` birth

{-prettyShow :: (Show a) => ZpMobius a -> String
prettyShow (ZpMobius n as x bs) = show n ++ (unlines $ map show as) ++ "\n" ++ show x ++ "\n" ++ (unlines $ map show bs) -}

showGame :: (PlaneZip p z1 z2) => p z1 z2 Bool -> String
showGame p =
  let xs = getSquare 200 p
    in unlines $ map (\(n,unnumberedLines) -> (printf "%03d" n)++unnumberedLines++(printf "%03d" n)) $ zip [(1::Int)..] $ map (map (\x -> if x then 'X' else ' ')) xs

main :: IO ()
main=mainProcessing

mainProcessing :: IO ()
mainProcessing = do --putStrLn $ show $ fst $ survivesOrAnnihilatesExtraInfo $ emptyExBoard  $ torusFromList $ vertWallBoard 5 2045
  let results = map (\x -> (survivesOrAnnihilatesExtraInfo . emptyExBoard . torusFromList $ vertWallBoard 5 x, x) ) [7,11..147]--[253,249]--[4..2050] --257]
  putStrLn $ unlines $ map (show . \((a,_),c) -> (a,c) ) results
{-main :: IO ()
main = do
  let results = map (\x -> (survivesOrAnnihilatesExtraInfo . emptyExBoard . torusFromList $ vertWallBoard 5 x, x) ) [113]--[253,249]--[4..2050] --257]
  putStrLn $ unlines $ map (show . \((a,_),c) -> (a,c) ) results
  let maxColsClusters = foldl (\(_,board) (dat,_) -> getMaxInfo $ countAliveClusters $ countAliveCols $ (dat,board)) (emptyExBoard $ snd $ fst $ head results) (map fst results)
      maxFuse = foldr (\(dat,_) m -> max m (fuseLength dat)) 0 (map fst results)
      maxCycle = foldr (\(dat,_) m -> max m (timeToCycle dat)) 0 (map fst results)
      minFuse = foldr (\(dat,_) m -> min m (fuseLength dat)) 999999 (map fst results)
      maxPeriod = foldr (\(dat,_) m -> max m (timeToCycle dat) - (fuseLength dat)) 0 (map fst results)
      allClusterSizes = foldr (\(dat,_) gs -> gs `union` seenClusterSizes dat) [] (map fst results)
      mostClusterSizes = foldr (\(dat,_) gs -> if (length $ seenClusterSizes dat) > (length gs) then seenClusterSizes dat else gs) [] (map fst results)
  putStrLn "Summary Results:"
  putStrLn $ "maxColsClusters: " ++ show maxColsClusters
  putStrLn $ "maxFuse: " ++ show maxFuse
  putStrLn $ "maxCycle: " ++ show maxCycle
  putStrLn $ "minFuse: " ++ show minFuse
  putStrLn $ "maxPeriod: " ++ show maxPeriod
  putStrLn $ "allClusterSizes: " ++ show allClusterSizes
  putStrLn $ "mostClusterSizes: " ++ show mostClusterSizes
-}

runGame :: (PlaneZip p z1 z2) => Int -> p z1 z2 Bool -> IO ()
runGame speed board = mainSpace 0 speed board

mainNoSpace :: (PlaneZip p z1 z2) => Int -> Int -> p z1 z2 Bool -> IO ()
mainNoSpace n speed board = do
  --clearScreen
  --putStrLn $ show n
  putStr $ showGame board
  threadDelay speed 
  mainNoSpace (n+1) speed $ extend gameOfLifeRule board

mainSpace :: (PlaneZip p z1 z2) => Int -> Int -> p z1 z2 Bool -> IO ()
mainSpace n speed board = do
  --clearScreen
  putStrLn $ show n
  putStrLn $ showGame board
  threadDelay speed 
  mainSpace (n+1) speed $ extend gameOfLifeRule board

mainFileOutput :: forall p z1 z2. (PlaneZip p z1 z2) => p z1 z2 Bool -> IO ()
mainFileOutput board = withFile "octave/outputGoL" WriteMode (f' board) --AppendMode
  where
  f' :: p z1 z2 Bool -> Handle -> IO ()
  f' board' hdl = do
    let xs = getSquare 200 board'
    let str = (unlines $ map (concatMap (\x -> if x then "2 " else "1 ")) xs) :: String
    hPutStrLn hdl str
    f' (extend gameOfLifeRule board') hdl

data BoardResult = Survived | Annihilated deriving (Show)
data ExtraStats = ExtraStats {
  aliveColumns :: Int, --assumes vert wall board on a torus/klein
  maxAliveColumns :: Int, --assumes vert wall board on a torus/klein
  aliveClusters :: Int, --assumes vert wall board on a torus/klein
  maxAliveClusters :: Int, --assumes vert wall board on a torus/klein
  timeToCycle :: Int, --starts at 0, the timeToCycle-th generation is the first repeated one
  survivedAnnihilated :: BoardResult,
  fuseLength :: Int, --starts at 0, the fuseLength-th generation is the one which is repeated after timeToCycle-th generations.
  --After the fuseLength-th generation, there will be (timetoCycle-fuseLength) unique generations in every cycle
  seenClusterSizes :: [Int],
  allClusterNums :: [Int],
  allGapSizes :: [[Int]]
  } deriving (Show)
type ExBoard p = (ExtraStats, p Bool)

emptyExBoard :: p Bool -> ExBoard p
emptyExBoard board = (ExtraStats{aliveColumns=0,maxAliveColumns=0,
                                 aliveClusters=0,maxAliveClusters=0,
                                 timeToCycle=0,survivedAnnihilated=Survived,
                                 fuseLength=0,seenClusterSizes=[],allClusterNums=[],
                                 allGapSizes=[]}, board)

updateBoard :: (PlaneZip p z1 z2) => ExBoard (p z1 z2) -> ExBoard (p z1 z2)
updateBoard (dat, board) =
  let board' = (dat, extend gameOfLifeRule board)
  in board' `seq` getMaxInfo $ countAliveClusters $ countAliveCols board'

countAliveCols :: (PlaneZip p z1 z2) => ExBoard (p z1 z2) -> ExBoard (p z1 z2)
countAliveCols (dat, board) =
  let total = sum $ map fromEnum $ head $ getFullBoard board
  in (dat{aliveColumns=total},board)

countAliveClusters :: (PlaneZip p z1 z2) => ExBoard (p z1 z2) -> ExBoard (p z1 z2)
countAliveClusters (dat, board) =
  let clusters = group $ map fromEnum $ head $ getFullBoard board
      clusters' = if length clusters >=2 && (head (head clusters) == 1 && head (head clusters) == head (last clusters)) --first cluster and last cluster are alive, so they're connected on torus
                  then (last clusters++(head clusters)) : (tail clusters)
                  else clusters
      total = sum $ map head $ clusters' --counts the clusters (live only)
      sizes = map length $ filter ((==1) . head) clusters' --gets the size of each cluster of live cells
      sizesZeros = map length $ filter ((==0) . head) clusters' --gets size of each cluster of dead cells
      sizes' = union (seenClusterSizes dat) sizes --dedups sizes, and removes elements already in seen, and merges
  in (dat{aliveClusters=total,seenClusterSizes=sizes',allClusterNums=total:(allClusterNums dat),allGapSizes=sizesZeros:(allGapSizes dat)},board)

--must call after count to take the max with an updated count, as in updateBaord
getMaxInfo :: ExBoard a -> ExBoard a
getMaxInfo (dat, board) =
  (dat{maxAliveColumns=max (aliveColumns dat) (maxAliveColumns dat),
       maxAliveClusters=max (aliveClusters dat) (maxAliveClusters dat)} , board)

survivesOrAnnihilates :: forall p z1 z2. PlaneZip p z1 z2 => p z1 z2 Bool -> Bool
survivesOrAnnihilates board =
  let emptyBoard = map (map $ const False) $ getFullBoard board
      
      f :: [[[Bool]]] -> [p z1 z2 Bool] -> Bool
      f boardsSoFar (nextBoard:rest) =
        let boolBoard = getFullBoard nextBoard in
        if boolBoard == emptyBoard then
          False --trace ("iterations until result" ++ (show $ length boardsSoFar)) False
          else if boolBoard `elem` boardsSoFar then
            True --trace ("iterations until result" ++ (show $ length boardsSoFar)) True
          else f (boolBoard:boardsSoFar) rest
      f _ [] = undefined --it's an infinite list
  in f [] $ iterate (extend gameOfLifeRule) board

survivesOrAnnihilatesExtraInfo :: forall p z1 z2. PlaneZip p z1 z2 => ExBoard (p z1 z2) -> ExBoard (p z1 z2)
survivesOrAnnihilatesExtraInfo exboard@(_, board) =
  let emptyBoard = map (map $ const False) $ getFullBoard board
      f :: [[[Bool]]] -> [ExBoard (p z1 z2)] -> ExBoard (p z1 z2)
      f boardsSoFar ((dat',nextBoard):rest) =
        let boolBoard = getFullBoard nextBoard in
        if boolBoard == emptyBoard then
          --trace ("iterations until result" ++ (show $ length boardsSoFar)) False
          (dat'{survivedAnnihilated=Annihilated, timeToCycle=length boardsSoFar,
                seenClusterSizes=sort $ seenClusterSizes dat',--{ },( nextBoard)
                --{( allClusterNums=reverse (allClusterNums dat'), allGapSizes=reverse $ allGapSizes dat'},nextBoard)
                allClusterNums=[], allGapSizes=[]},nextBoard)
          else if boolBoard `elem` boardsSoFar then
            (dat'{survivedAnnihilated=Survived, timeToCycle=length boardsSoFar,
                 fuseLength=length boardsSoFar - (fromJust $ elemIndex boolBoard boardsSoFar) - 1,
                 seenClusterSizes=sort $ seenClusterSizes dat', --{ },( nextBoard)
                 --{( allClusterNums=reverse (allClusterNums dat'), allGapSizes=reverse $ allGapSizes dat'},nextBoard)
                 allClusterNums=[], allGapSizes=[]}, nextBoard)
          else f (boolBoard:boardsSoFar) rest
      f _ [] = undefined --it's an infinite list
  in f [] $ iterate updateBoard exboard

survivesOrAnnihilatesExtraInfoTest :: forall p z1 z2. PlaneZip p z1 z2 => ExBoard (p z1 z2) -> ExBoard (p z1 z2)
survivesOrAnnihilatesExtraInfoTest exboard@(_, board) =
  let emptyBoard = map (map $ const False) $ getFullBoard board
      f :: ExBoard (p z1 z2) -> ExBoard (p z1 z2)
      f full@(dat',nextBoard) =
        let boolBoard = getFullBoard nextBoard in
        if boolBoard == emptyBoard then
          --trace ("iterations until result" ++ (show $ length boardsSoFar)) False
          (dat'{survivedAnnihilated=Annihilated, timeToCycle=0,
                seenClusterSizes=sort $ seenClusterSizes dat'},nextBoard)
        else full `seq` f $ updateBoard full      
  in f exboard

data Interval a = Interval a a deriving (Show, Eq)--closed interval

{-getNumComponents :: PlaneZip p z1 z2 => ExBoard (p z1 z2) -> ExBoard (p z1 z2)
getNumComponents (dat,board) =
  let aliveCoordinates :: Integral a => [[a]] --board to coordinates of live cells in each row
      aliveCoordinates = map (\row -> map snd $ filter (\(b,_) -> b) $ zip row [1..]) $ getFullBoard board 
      aliveCooGrouped :: Integral a => [[Interval a]] -- list of start/end coordinates of clusters of live cells in each row (no torus/klein consideration)
      aliveCooGrouped = map (tail . reverse . foldl (\full@(Interval a b:result) x -> if x==b+1 then Interval a x:result else Interval x x:full) [Interval (-1) (-1)]) aliveCoordinates
      --now treat alive coo grouped as a graph, where there may be edges up/down, and each tuple is a vertex
      aliveCooGrouped' :: Integral a => [[(Interval a,a)]] --snd in each pair is number of component, also head is nonempty, has at least one live cell-block
      aliveCooGrouped'= (\x -> zip (head x) [1..] : map (`zip` repeat (-1)) (tail x)) $ dropWhile (== []) aliveCooGrouped
      aliveCooGroupedTorus :: Integral a => ListZipTorus (ListZipTorus (Interval a, a))
      aliveCooGroupedTorus = ListZipTorus [] (ListZipTorus [] (head $ head aliveCooGrouped') (tail $ head aliveCooGrouped')) 
                                             (map (\(r:row) -> ListZipTorus [] r row) $ tail aliveCooGrouped')
      labelComponets :: Integral a => ListZipTorus (ListZipTorus (Interval a, a)) -> ListZipTorus (ListZipTorus (Interval a, a))
    in emptyExBoard board-}

--1,2,2,2,2,4,4,2,2,4,4,4,4,6,6,2,2,2,2,4,4,2,2,4,4,4,4,6,6,2
--1,2,2,2,2,4,4,2,2,4,4,4,4,8,8,2,2,4,4,4,4,8,8,4,4,8,8,8,8,16,16,2,2,4,4,4,4,6,6,4,4,6,6,8,8,6,6,4,4,8,8,8,8,12,12,8,8,10,10,16,16,6,6,2,2,4,4,4,4,8,8,4,4,8,8,6,6,12,12,4,4,8,8,6,6,12,12,8,8,14,14,6,6,6,6,4,4,8,8,8,8,10,10,8,8,10,10,12,12,10,10,8,8,14,14,10,10,10,10,16,16,6,6,6,6,12,12,2,2,4,4,4,4,8,8,4,4,8,8,8,8,14,14,4,4,6,6,8,8,10,10,6,6,8,8,12,12,6,6,4,4,8,8,8,8,12,12,6,6,8,8,12,12,8,8,8,8,10,10,14,14,10,10,6,6,12,12,6,6,12,12,4,4,6,6,8,8,10,10,8,8,12,12,10,10,10,10,8,8,8,8,10,10,12,12,12,12,10,10,10,10,8,8,8,8,12,12,14,14,10,10,10,10,14,14,10,10,10,10,16,16,6,6,6,6,10,10,6,6,10,10,12,12,14,14,2,2,4,4,4,4,8,8,4,4,6,6,8,8,10,10,4,4,8,8,8,8,14,14,8,8,10,10,14,14,6,6,4,4,8,8,6,6,8,8,8,8,8,8,10,10,12,12,6,6,12,12,8,8,10,10,12,12,14,14,6,6,10,10,4,4,6,6,8,8,10,10,8,8,8,8,12,12,14,14,6,6,8,8,8,8,6,6,12,12,6,6,8,8,8,8,8,8,12,12,10,10,12,12,14,14,6,6,10,10,6,6,6,6,8,8,12,12,8,8,6,6,8,8,12,12,10,10,4,4,8,8,6,6,12,12,8,8,12,12,10,10,10,10,8,8,10,10,12,12,10,10,10,10,12,12,10,10,10,10,8,8,14,14,8,8,10,10,10,10,6,6,12,12,8,8,12,12,10,10,10,10,12,12,10,10,6,6,8,8,12,12,8,8,6,6,12,12,10,10,14,14,8,8,10,10,10,10,10,10,12,12,14,14,6,6,10,10,8,8,10,10,8,8,16,16,6,6,6,6,8,8,6,6,8,8,10,10,8,8,6,6,12,12,10,10,12,12,12,12,10,10,14,14,10,10,2,2,4,4,4,4,8,8,4,4,8,8,8,8,16,16,4,4,6,6,6,6,6,6,8,8,12,12,10,10,6,6,4,4,8,8,8,8,12,12,8,8,12,12,14,14,6,6,8,8,10,10,10,10,10,10,14,14,10,10,6,6,12,12,4,4,8,8,8,8,14,14,6,6,10,10,8,8,6,6,8,8,12,12,8,8,8,8,10,10,10,10,12,12,12,12,6,6,10,10,12,12,10,10,8,8,12,12,10,10,8,8,12,12,10,10,14,14,10,10,6,6,10,10,10,10,14,14,4,4,8,8,6,6,10,10,8,8,14,14,10,10,6,6,8,8,8,8,8,8,12,12,12,12,10,10,14,14,10,10,6,6,10,10,8,8,14,14,8,8,6,6,6,6,8,8,12,12,12,12,6,6,6,6,8,8,8,8,8,8,10,10,8,8,12,12,12,12,10,10,10,10,10,10,12,12,10,10,14,14,10,10,6,6,8,8,10,10,12,12,6,6,12,12,6,6,10,10,8,8,10,10,12,12,6,6,8,8,8,8,6,6,8,8,8,8,8,8,12,12,12,12,10,10,10,10,4,4,8,8,8,8,16,16,6,6,6,6,12,12,6,6,8,8,12,12,12,12,6,6,10,10,10,10,10,10,12,12,8,8,14,14,10,10,6,6,12,12,8,8,10,10,12,12,10,10,10,10,12,12,8,8,10,10,10,10,10,10,14,14,8,8,10,10,14,14,6,6,8,8,12,12,10,10,10,10,10,10,14,14,6,6,8,8,12,12,6,6,8,8,10,10,12,12,10,10,10,10,10,10,10,10,8,8,12,12,12,12,10,10,10,10,6,6,8,8,8,8,8,8,12,12,10,10,8,8,16,16,6,6,6,6,12,12,6,6,10,10,12,12,14,14,6,6,8,8,12,12,10,10,8,8,10,10,14,14,10,10,6,6,12,12,10,10,14,14,8,8,6,6,10,10,10,10,10,10,8,8,12,12,10,10,8,8,8,8,10,10,16,16,6,6,6,6,12,12,6,6,12,12,8,8,14,14,6,6,10,10,8,8,10,10,10,10,12,12,8,8,10,10,6,6,12,12,12,12,14,14,10,10,10,10,12,12,10,10,12,12,14,14,10,10,10,10,14,14,10,10,10,10,18,18,2,2,2,2,4,4,2,2,4,4,4,4,8,8,2,2,4,4,4,4,8,8,4,4,8,8,8,8,16,16,2,2,4,4,4,4,6,6,4,4,6,6,8,8,6,6,4,4,8,8,8,8,12,12,8,8,10,10,16,16,6,6,2,2,4,4,4,4,8,8,4,4,8,8,6,6,12,12,4,4,8,8,6,6,12,12,8,8,14,14,6,6,6,6,4,4,8,8,8,8,10,10,8,8,10,10,12,12,10,10,8,8,14,14,10,10,10,10,16,16,6,6,6,6,12,12,2,2,4,4,4,4,8,8,4,4,8,8,8,8,14,14,4,4,6,6,8,8,10,10,6,6,8,8,12,12,6,6,4,4,8,8,8,8,12,12,6,6,8,8,12,12,8,8,8,8,10,10,14,14,10,10,6,6,12,12,6,6,12,12,4,4,6,6,8,8,10,10,8,8,12,12,10,10,10,10,8,8,8,8,10,10,12,12,12,12,10,10,10,10,8,8,8,8,12,12,14,14,10,10,10,10,14,14,10,10,10,10,16,16,6,6,6,6,10,10,6,6,10,10,12,12,14,14,2,2,4,4,4,4,8,8,4,4,6,6,8,8,10,10,4,4,8,8,8,8,14,14,8,8,10,10,14,14,6,6,4,4,8,8,6,6,8,8,8,8,8,8,10,10,12,12,6,6,12,12,8,8,10,10,12,12,14,14,6,6,10,10,4,4,6,6,8,8,10,10,8,8,8,8,12,12,14,14,6,6,8,8,8,8,6,6,12,12,6,6,8,8,8,8,8,8,12,12,10,10,12,12,14,14,6,6,10,10,6,6,6,6,8,8,12,12,8,8,6,6,8,8,12,12,10,10,4,4,8,8,6,6,12,12,8,8,12,12,10,10,10,10,8,8,10,10,12,12,10,10,10,10,12,12,10,10,10,10,8,8,14,14,8,8,10,10,10,10,6,6,12,12,8,8,12,12,10,10,10,10,12,12,10,10,6,6,8,8,12,12,8,8,6,6,12,12,10,10,14,14,8,8,10,10,10,10,10,10,12,12,14,14,6,6,10,10,8,8,10,10,8,8,16,16,6,6,6,6,8,8,6,6,8,8,10,10,8,8,6,6,12,12,10,10,12,12,12,12,10,10,14,14,10,10,2,2,4,4,4,4,8,8,4,4,8,8,8,8,16,16,4,4,6,6,6,6,6,6,8,8,12,12,10,10,6,6,4,4,8,8,8,8,12,12,8,8,12,12,14,14,6,6,8,8,10,10,10,10,10,10,14,14,10,10,6,6,12,12,4,4,8,8,8,8,14,14,6,6,10,10,8,8,6,6,8,8,12,12,8,8,8,8,10,10,10,10,12,12,12,12,6,6,10,10,12,12,10,10,8,8,12,12,10,10,8,8,12,12,10,10,14,14,10,10,6,6,10,10,10,10,14,14,4,4,8,8,6,6,10,10,8,8,14,14,10,10,6,6,8,8,8,8,8,8,12,12,12,12,10,10,14,14,10,10,6,6,10,10,8,8,14,14,8,8,6,6,6,6,8,8,12,12,12,12,6,6,6,6,8,8,8,8,8,8,10,10,8,8,12,12,12,12,10,10,10,10,10,10,12,12,10,10,14,14,10,10,6,6,8,8,10,10,12,12,6,6,12,12,6,6,10,10,8,8,10,10,12,12,6,6,8,8,8,8,6,6,8,8,8,8,8,8,12,12,12,12,10,10,10,10,4,4,8,8,8,8,16,16,6,6,6,6,12,12,6,6,8,8,12,12,12,12,6,6,10,10,10,10,10,10,12,12,8,8,14,14,10,10,6,6,12,12,8,8,10,10,12,12,10,10,10,10,12,12,8,8,10,10,10,10,10,10,14,14,8,8,10,10,14,14,6,6,8,8,12,12,10,10,10,10,10,10,14,14,6,6,8,8,12,12,6,6,8,8,10,10,12,12,10,10,10,10,10,10,10,10,8,8,12,12,12,12,10,10,10,10,6,6,8,8,8,8,8,8,12,12,10,10,8,8,16,16,6,6,6,6,12,12,6,6,10,10,12,12,14,14,6,6,8,8,12,12,10,10,8,8,10,10,14,14,10,10,6,6,12,12,10,10,14,14,8,8,6,6,10,10,10,10,10,10,8,8,12,12,10,10,8,8,8,8,10,10,16,16,6,6,6,6,12,12,6,6,12,12,8,8,14,14,6,6,10,10,8,8,10,10,10,10,12,12,8,8,10,10,6,6,12,12,12,12,14,14,10,10,10,10,12,12,10,10,12,12,14,14,10,10,10,10,14,14,10,10,10,10,18,18,2

--2,2,4,2,4,4,8,2,4,4,8,4,8,8,16,2,4,4,8,4,8,8,16,4,8,8,16,8,16,16,32,2,4,4,8,4,8,8,16,4,8,8,16,8,16,16,32,4,8,8,16,8,16,16,32,8,16,16,32,16,32,32,64,2,4,4,8,4,8,8,16,4,8,8,16,8,16,16,32,4,8,8,16,8,16,16,32,8,16,16,32,16,32,32,64,4,8,8,16,8,16,16,32,8,16,16,32,16,32,32,64,8,16,16,32,16,32,32,64,16,32,32,64,32,64,64,128,2,4,4,8,4,8,8,16,4,8,8,16,8,16,16,32,4,8,8,16,8,16,16,32,8,16,16,32,16,32,32,64,4,8,8,16,8,16,16,32,8,16,16,32,16,32,32,64,8,16,16,32,16,32,32,64,16,32,32,64,32,64,64,128,4,8,8,16,8,16,16,32,8,16,16,32,16,32,32,64,8,16,16,32,16,32,32,64,16,32,32,64,32,64,64,128,8,16,16,32,16,32,32,64,16,32,32,64,32,64,64,128,16,32,32,64,32,64,64,128,32,64,64,128,64,128,128,256,0
{-
--1024
2
2 4
2 4 4 8
2 4 4 8 4 8 8 16
2 4 4 8 4 8 8 16 4 8 8 16 8 16 16 32
2 4 4 8 4 8 8 16 4 8 8 16 8 16 16 32 4 8 8 16 8 16 16 32 8 16 16 32 16 32 32 64

--43
2 
2 4 
2 4 4 8 
2 4 4 6 4 6 8 6 
2 4 4 8 4 6 6 6 4 8 6 6 8 6 6 10 
2 
2 4 
2 4 4 8 
2 4 4 6 4 6 8 6 
2 4 4 8 4 6 6 6 4 8 6 6 8 6 6 10 

--27
2,2,4,2,4,4,6,2,2,4,2,4,4,6,2
2
2 4
2 4 4 6
2
2 4
2 4 4 6

2 
2 4 
2 4 4 8 
2 4 4 8 4 6 8 10 
2 4 4 6 4 6 8 6 4 8 6 8 8 6 10 6 
2 4 4 8 4 8 6 10 4 6 6 6 8 8 6 6 4 8 8 10 6 6 8 6 8 10 6 6 10 6 6 12 
2 
2 4 
2 4 4 8 
2 4 4 8 4 6 8 10 2 4 4 6 4 6 8 6 4 8 6 8 8 6 10 6 2 4 4 8 4 8 6 10 4 6 6 6 8 8 6 6 4 8 8 10 6 6 8 6 8 10 6 6 10 6 6 12 2



[[509,3,510],
[507,7,508],[505,3,3,3,506],
[503,15,504],[501,3,11,3,502],[499,7,7,7,500],[497,3,3,3,3,3,3,3,498],
[495,31,496],[493,3,27,3,494],[491,7,23,7,492],[489,3,3,3,19,3,3,3,490],[487,15,15,15,488],[485,3,11,3,11,3,11,3,486],[483,7,7,7,7,7,7,7,484],[481,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,482],
[479,63,480],[477,3,59,3,478],[475,7,55,7,476],[473,3,3,3,51,3,3,3,474],[471,15,47,15,472],[469,3,11,3,43,3,11,3,470],[467,7,7,7,39,7,7,7,468],[465,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,466],[463,31,31,31,464],[461,3,27,3,27,3,27,3,462],[459,7,23,7,23,7,23,7,460],[457,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,458],[455,15,15,15,15,15,15,15,456],[453,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,454],[451,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,452],[449,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,450],[447,127,448],[445,3,123,3,446],[443,7,119,7,444],[441,3,3,3,115,3,3,3,442],[439,15,111,15,440],[437,3,11,3,107,3,11,3,438],[435,7,7,7,103,7,7,7,436],[433,3,3,3,3,3,3,3,99,3,3,3,3,3,3,3,434],[431,31,95,31,432],[429,3,27,3,91,3,27,3,430],[427,7,23,7,87,7,23,7,428],[425,3,3,3,19,3,3,3,83,3,3,3,19,3,3,3,426],[423,15,15,15,79,15,15,15,424],[421,3,11,3,11,3,11,3,75,3,11,3,11,3,11,3,422],[419,7,7,7,7,7,7,7,71,7,7,7,7,7,7,7,420],[417,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,67,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,418],[415,63,63,63,416],[413,3,59,3,59,3,59,3,414],[411,7,55,7,55,7,55,7,412],[409,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,410],[407,15,47,15,47,15,47,15,408],[405,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,406],[403,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,404],[401,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,402],[399,31,31,31,31,31,31,31,400],[397,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,398],[395,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,396],[393,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,394],[391,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,392],[389,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,390],[387,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,388],[385,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,386],[383,255,384],[381,3,251,3,382],[379,7,247,7,380],[377,3,3,3,243,3,3,3,378],[375,15,239,15,376],[373,3,11,3,235,3,11,3,374],[371,7,7,7,231,7,7,7,372],[369,3,3,3,3,3,3,3,227,3,3,3,3,3,3,3,370],[367,31,223,31,368],[365,3,27,3,219,3,27,3,366],[363,7,23,7,215,7,23,7,364],[361,3,3,3,19,3,3,3,211,3,3,3,19,3,3,3,362],[359,15,15,15,207,15,15,15,360],[357,3,11,3,11,3,11,3,203,3,11,3,11,3,11,3,358],[355,7,7,7,7,7,7,7,199,7,7,7,7,7,7,7,356],[353,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,195,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,354],[351,63,191,63,352],[349,3,59,3,187,3,59,3,350],[347,7,55,7,183,7,55,7,348],[345,3,3,3,51,3,3,3,179,3,3,3,51,3,3,3,346],[343,15,47,15,175,15,47,15,344],[341,3,11,3,43,3,11,3,171,3,11,3,43,3,11,3,342],[339,7,7,7,39,7,7,7,167,7,7,7,39,7,7,7,340],[337,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,163,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,338],[335,31,31,31,159,31,31,31,336],[333,3,27,3,27,3,27,3,155,3,27,3,27,3,27,3,334],[331,7,23,7,23,7,23,7,151,7,23,7,23,7,23,7,332],[329,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,147,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,330],[327,15,15,15,15,15,15,15,143,15,15,15,15,15,15,15,328],[325,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,139,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,326],[323,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,135,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,324],[321,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,131,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,322],[319,127,127,127,320],[317,3,123,3,123,3,123,3,318],[315,7,119,7,119,7,119,7,316],[313,3,3,3,115,3,3,3,115,3,3,3,115,3,3,3,314],[311,15,111,15,111,15,111,15,312],[309,3,11,3,107,3,11,3,107,3,11,3,107,3,11,3,310],[307,7,7,7,103,7,7,7,103,7,7,7,103,7,7,7,308],[305,3,3,3,3,3,3,3,99,3,3,3,3,3,3,3,99,3,3,3,3,3,3,3,99,3,3,3,3,3,3,3,306],[303,31,95,31,95,31,95,31,304],[301,3,27,3,91,3,27,3,91,3,27,3,91,3,27,3,302],[299,7,23,7,87,7,23,7,87,7,23,7,87,7,23,7,300],[297,3,3,3,19,3,3,3,83,3,3,3,19,3,3,3,83,3,3,3,19,3,3,3,83,3,3,3,19,3,3,3,298],[295,15,15,15,79,15,15,15,79,15,15,15,79,15,15,15,296],[293,3,11,3,11,3,11,3,75,3,11,3,11,3,11,3,75,3,11,3,11,3,11,3,75,3,11,3,11,3,11,3,294],[291,7,7,7,7,7,7,7,71,7,7,7,7,7,7,7,71,7,7,7,7,7,7,7,71,7,7,7,7,7,7,7,292],[289,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,67,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,67,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,67,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,290],[287,63,63,63,63,63,63,63,288],[285,3,59,3,59,3,59,3,59,3,59,3,59,3,59,3,286],[283,7,55,7,55,7,55,7,55,7,55,7,55,7,55,7,284],[281,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,282],[279,15,47,15,47,15,47,15,47,15,47,15,47,15,47,15,280],[277,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,278],[275,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,276],[273,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,274],[271,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,272],[269,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,270],[267,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,268],[265,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,266],[263,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,264],[261,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,262],[259,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,260],[257,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,258],[255,511,256],[253,3,507,3,254],[251,7,503,7,252],[249,3,3,3,499,3,3,3,250],[247,15,495,15,248],[245,3,11,3,491,3,11,3,246],[243,7,7,7,487,7,7,7,244],[241,3,3,3,3,3,3,3,483,3,3,3,3,3,3,3,242],[239,31,479,31,240],[237,3,27,3,475,3,27,3,238],[235,7,23,7,471,7,23,7,236],[233,3,3,3,19,3,3,3,467,3,3,3,19,3,3,3,234],[231,15,15,15,463,15,15,15,232],[229,3,11,3,11,3,11,3,459,3,11,3,11,3,11,3,230],[227,7,7,7,7,7,7,7,455,7,7,7,7,7,7,7,228],[225,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,451,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,226],[223,63,447,63,224],[221,3,59,3,443,3,59,3,222],[219,7,55,7,439,7,55,7,220],[217,3,3,3,51,3,3,3,435,3,3,3,51,3,3,3,218],[215,15,47,15,431,15,47,15,216],[213,3,11,3,43,3,11,3,427,3,11,3,43,3,11,3,214],[211,7,7,7,39,7,7,7,423,7,7,7,39,7,7,7,212],[209,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,419,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,210],[207,31,31,31,415,31,31,31,208],[205,3,27,3,27,3,27,3,411,3,27,3,27,3,27,3,206],[203,7,23,7,23,7,23,7,407,7,23,7,23,7,23,7,204],[201,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,403,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,202],[199,15,15,15,15,15,15,15,399,15,15,15,15,15,15,15,200],[197,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,395,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,198],[195,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,391,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,196],[193,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,387,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,194],[191,127,383,127,192],[189,3,123,3,379,3,123,3,190],[187,7,119,7,375,7,119,7,188],[185,3,3,3,115,3,3,3,371,3,3,3,115,3,3,3,186],[183,15,111,15,367,15,111,15,184],[181,3,11,3,107,3,11,3,363,3,11,3,107,3,11,3,182],[179,7,7,7,103,7,7,7,359,7,7,7,103,7,7,7,180],[177,3,3,3,3,3,3,3,99,3,3,3,3,3,3,3,355,3,3,3,3,3,3,3,99,3,3,3,3,3,3,3,178],[175,31,95,31,351,31,95,31,176],[173,3,27,3,91,3,27,3,347,3,27,3,91,3,27,3,174],[171,7,23,7,87,7,23,7,343,7,23,7,87,7,23,7,172],[169,3,3,3,19,3,3,3,83,3,3,3,19,3,3,3,339,3,3,3,19,3,3,3,83,3,3,3,19,3,3,3,170],[167,15,15,15,79,15,15,15,335,15,15,15,79,15,15,15,168],[165,3,11,3,11,3,11,3,75,3,11,3,11,3,11,3,331,3,11,3,11,3,11,3,75,3,11,3,11,3,11,3,166],[163,7,7,7,7,7,7,7,71,7,7,7,7,7,7,7,327,7,7,7,7,7,7,7,71,7,7,7,7,7,7,7,164],[161,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,67,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,323,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,67,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,162],[159,63,63,63,319,63,63,63,160],[157,3,59,3,59,3,59,3,315,3,59,3,59,3,59,3,158],[155,7,55,7,55,7,55,7,311,7,55,7,55,7,55,7,156],[153,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,307,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,154],[151,15,47,15,47,15,47,15,303,15,47,15,47,15,47,15,152],[149,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,299,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,150],[147,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,295,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,148],[145,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,291,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,146],[143,31,31,31,31,31,31,31,287,31,31,31,31,31,31,31,144],[141,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,283,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,142],[139,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,279,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,140],[137,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,275,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,138],[135,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,271,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,136],[133,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,267,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,134],[131,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,263,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,132],[129,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,259,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,130],[127,255,255,255,128],[125,3,251,3,251,3,251,3,126],[123,7,247,7,247,7,247,7,124],[121,3,3,3,243,3,3,3,243,3,3,3,243,3,3,3,122],[119,15,239,15,239,15,239,15,120],[117,3,11,3,235,3,11,3,235,3,11,3,235,3,11,3,118],[115,7,7,7,231,7,7,7,231,7,7,7,231,7,7,7,116],[113,3,3,3,3,3,3,3,227,3,3,3,3,3,3,3,227,3,3,3,3,3,3,3,227,3,3,3,3,3,3,3,114],[111,31,223,31,223,31,223,31,112],[109,3,27,3,219,3,27,3,219,3,27,3,219,3,27,3,110],[107,7,23,7,215,7,23,7,215,7,23,7,215,7,23,7,108],[105,3,3,3,19,3,3,3,211,3,3,3,19,3,3,3,211,3,3,3,19,3,3,3,211,3,3,3,19,3,3,3,106],[103,15,15,15,207,15,15,15,207,15,15,15,207,15,15,15,104],[101,3,11,3,11,3,11,3,203,3,11,3,11,3,11,3,203,3,11,3,11,3,11,3,203,3,11,3,11,3,11,3,102],[99,7,7,7,7,7,7,7,199,7,7,7,7,7,7,7,199,7,7,7,7,7,7,7,199,7,7,7,7,7,7,7,100],[97,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,195,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,195,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,195,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,98],[95,63,191,63,191,63,191,63,96],[93,3,59,3,187,3,59,3,187,3,59,3,187,3,59,3,94],[91,7,55,7,183,7,55,7,183,7,55,7,183,7,55,7,92],[89,3,3,3,51,3,3,3,179,3,3,3,51,3,3,3,179,3,3,3,51,3,3,3,179,3,3,3,51,3,3,3,90],[87,15,47,15,175,15,47,15,175,15,47,15,175,15,47,15,88],[85,3,11,3,43,3,11,3,171,3,11,3,43,3,11,3,171,3,11,3,43,3,11,3,171,3,11,3,43,3,11,3,86],[83,7,7,7,39,7,7,7,167,7,7,7,39,7,7,7,167,7,7,7,39,7,7,7,167,7,7,7,39,7,7,7,84],[81,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,163,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,163,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,163,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,82],[79,31,31,31,159,31,31,31,159,31,31,31,159,31,31,31,80],[77,3,27,3,27,3,27,3,155,3,27,3,27,3,27,3,155,3,27,3,27,3,27,3,155,3,27,3,27,3,27,3,78],[75,7,23,7,23,7,23,7,151,7,23,7,23,7,23,7,151,7,23,7,23,7,23,7,151,7,23,7,23,7,23,7,76],[73,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,147,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,147,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,147,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,74],[71,15,15,15,15,15,15,15,143,15,15,15,15,15,15,15,143,15,15,15,15,15,15,15,143,15,15,15,15,15,15,15,72],[69,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,139,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,139,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,139,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,70],[67,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,135,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,135,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,135,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,68],[65,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,131,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,131,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,131,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,66],[63,127,127,127,127,127,127,127,64],[61,3,123,3,123,3,123,3,123,3,123,3,123,3,123,3,62],[59,7,119,7,119,7,119,7,119,7,119,7,119,7,119,7,60],[57,3,3,3,115,3,3,3,115,3,3,3,115,3,3,3,115,3,3,3,115,3,3,3,115,3,3,3,115,3,3,3,58],[55,15,111,15,111,15,111,15,111,15,111,15,111,15,111,15,56],[53,3,11,3,107,3,11,3,107,3,11,3,107,3,11,3,107,3,11,3,107,3,11,3,107,3,11,3,107,3,11,3,54],[51,7,7,7,103,7,7,7,103,7,7,7,103,7,7,7,103,7,7,7,103,7,7,7,103,7,7,7,103,7,7,7,52],[49,3,3,3,3,3,3,3,99,3,3,3,3,3,3,3,99,3,3,3,3,3,3,3,99,3,3,3,3,3,3,3,99,3,3,3,3,3,3,3,99,3,3,3,3,3,3,3,99,3,3,3,3,3,3,3,99,3,3,3,3,3,3,3,50],[47,31,95,31,95,31,95,31,95,31,95,31,95,31,95,31,48],[45,3,27,3,91,3,27,3,91,3,27,3,91,3,27,3,91,3,27,3,91,3,27,3,91,3,27,3,91,3,27,3,46],[43,7,23,7,87,7,23,7,87,7,23,7,87,7,23,7,87,7,23,7,87,7,23,7,87,7,23,7,87,7,23,7,44],[41,3,3,3,19,3,3,3,83,3,3,3,19,3,3,3,83,3,3,3,19,3,3,3,83,3,3,3,19,3,3,3,83,3,3,3,19,3,3,3,83,3,3,3,19,3,3,3,83,3,3,3,19,3,3,3,83,3,3,3,19,3,3,3,42],[39,15,15,15,79,15,15,15,79,15,15,15,79,15,15,15,79,15,15,15,79,15,15,15,79,15,15,15,79,15,15,15,40],[37,3,11,3,11,3,11,3,75,3,11,3,11,3,11,3,75,3,11,3,11,3,11,3,75,3,11,3,11,3,11,3,75,3,11,3,11,3,11,3,75,3,11,3,11,3,11,3,75,3,11,3,11,3,11,3,75,3,11,3,11,3,11,3,38],[35,7,7,7,7,7,7,7,71,7,7,7,7,7,7,7,71,7,7,7,7,7,7,7,71,7,7,7,7,7,7,7,71,7,7,7,7,7,7,7,71,7,7,7,7,7,7,7,71,7,7,7,7,7,7,7,71,7,7,7,7,7,7,7,36],[33,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,67,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,67,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,67,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,67,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,67,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,67,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,67,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,34],[31,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,32],[29,3,59,3,59,3,59,3,59,3,59,3,59,3,59,3,59,3,59,3,59,3,59,3,59,3,59,3,59,3,59,3,30],[27,7,55,7,55,7,55,7,55,7,55,7,55,7,55,7,55,7,55,7,55,7,55,7,55,7,55,7,55,7,55,7,28],[25,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,51,3,3,3,26],[23,15,47,15,47,15,47,15,47,15,47,15,47,15,47,15,47,15,47,15,47,15,47,15,47,15,47,15,47,15,47,15,24],[21,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,43,3,11,3,22],[19,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,39,7,7,7,20],[17,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,35,3,3,3,3,3,3,3,18],[15,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,16],[13,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,27,3,14],[11,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,23,7,12],[9,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,19,3,3,3,10],[7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8],[5,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,6],[3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,4],[1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2],[1024]]


[[19,3,19],
[17,7,17], [15,3,3,3,15],
[13,15,13],[11,3,11,3,11],[9,7,7,7,9],[7,3,3,3,3,3,3,3,7],
[5,31,5],[3,3,27,3,3],[1,7,23,7,1],[3,3,3,19,3,3,3],[1,11,15,11,1],[3,7,3,11,3,7,3],[1,3,3,7,7,7,3,3,1],[11,3,3,3,3,3,11],
[9,23,9],[7,3,19,3,7],[5,7,15,7,5],[3,3,3,3,11,3,3,3,3],[1,15,7,15,1],[3,11,3,3,3,11,3],[1,3,7,15,7,3,1],[7,3,3,11,3,3,7],[5,11,7,11,5],[3,3,7,3,3,3,7,3,3],[1,7,3,15,3,7,1],[3,3,7,11,7,3,3],[1,7,3,3,7,3,3,7,1],[3,3,11,3,11,3,3],[1,7,7,7,7,7,1],[3,3,3,3,3,3,3,3,3,3,3],[1,39,1],[3,35,3],[1,3,31,3,1],[7,27,7],[5,3,23,3,5],[3,7,19,7,3],[1,3,3,3,15,3,3,3,1],[15,11,15],[13,3,7,3,13],[11,7,3,7,11],[9,3,3,7,3,3,9],[7,11,3,11,7],[5,3,7,7,7,3,5],[3,7,3,3,3,3,3,7,3],[1,3,3,23,3,3,1],[11,19,11],[9,3,15,3,9],[7,7,11,7,7],[5,3,3,3,7,3,3,3,5],[3,15,3,15,3],[1,3,11,7,11,3,1],[7,7,3,3,3,7,7],[5,3,3,15,3,3,5],[3,11,11,11,3],[1,3,7,3,7,3,7,3,1],[7,3,7,3,7,3,7],[5,7,3,7,3,7,5],[3,3,3,7,3,7,3,3,3],[1,11,3,7,3,11,1],[3,7,7,3,7,7,3],[1,3,3,3,3,7,3,3,3,3,1],[19,3,19]]
--43
2 
2 4 
2 4 4 8 
2 4 4 6 4 6 8 6 
2 4 4 8 4 6 6 6 4 8 6 6 8 6 6 10 
2 
2 4 
2 4 4 8 
2 4 4 6 4 6 8 6 
2 4 4 8 4 6 6 6 4 8 6 6 8 6 6 10 
-}
